#!/bin/bash
set -euo pipefail

# Load plugin library
# shellcheck source=lib/plugin.bash
source "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/../lib/plugin.bash"

main() {
  echo "--- :docker: Setting up Docker cache environment"
  log_info "Setting up Docker cache environment"

  if [[ -z "${BUILDKITE_PLUGIN_DOCKER_CACHE_PROVIDER:-}" ]]; then
    log_error "provider is required"
    exit 1
  fi

  if [[ -z "${BUILDKITE_PLUGIN_DOCKER_CACHE_IMAGE:-}" ]]; then
    log_error "image is required"
    exit 1
  fi

  log_info "Provider - ${BUILDKITE_PLUGIN_DOCKER_CACHE_PROVIDER}"
  log_info "Image - ${BUILDKITE_PLUGIN_DOCKER_CACHE_IMAGE}"
  log_info "Cache key - ${BUILDKITE_PLUGIN_DOCKER_CACHE_KEY:-auto}"

  case "${BUILDKITE_PLUGIN_DOCKER_CACHE_PROVIDER}" in
    ecr|gar)
      ;;
    *)
      log_error "unsupported provider '${BUILDKITE_PLUGIN_DOCKER_CACHE_PROVIDER}'"
      log_info "Supported providers: ecr, gar"
      exit 1
      ;;
  esac

  # Authenticate with registry
  setup_provider_environment

  # Generate cache key if not set
  if [[ -z "${BUILDKITE_PLUGIN_DOCKER_CACHE_KEY:-}" ]]; then
    local cache_key
    cache_key=$(generate_cache_key)
    export BUILDKITE_PLUGIN_DOCKER_CACHE_KEY="$cache_key"
    log_info "Generated cache key - $cache_key"
  else
    log_info "Using provided cache key - ${BUILDKITE_PLUGIN_DOCKER_CACHE_KEY}"
  fi
}

main "$@"
