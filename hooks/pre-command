#!/bin/bash
set -euo pipefail

# Load plugin library
# shellcheck source=lib/plugin.bash
source "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/../lib/plugin.bash"

main() {
  echo "--- :docker: Docker cache build"

  plugin_read_config
  check_dependencies

  local cache_key="${BUILDKITE_PLUGIN_DOCKER_CACHE_KEY:-}"

  # Setup provider authentication
  setup_provider_environment

  # Generate cache key if not provided and export it
  if [[ -z "$cache_key" ]]; then
    cache_key=$(generate_cache_key)
    log_info "Generated cache key $cache_key"
  else
    log_info "Using provided cache key $cache_key"
  fi

  # Export the cache key for other functions to use
  export BUILDKITE_PLUGIN_DOCKER_CACHE_KEY="$cache_key"

  # Build cache image name
  local cache_image
  cache_image=$(build_cache_image_name)

  # Try to restore from cache first
  restore_cache

  # Check if we can skip build entirely
  if [[ "${BUILDKITE_PLUGIN_DOCKER_CACHE_SKIP_PULL_FROM_CACHE:-false}" == "true" ]] && [[ "${BUILDKITE_PLUGIN_DOCKER_CACHE_HIT:-false}" == "true" ]]; then
    log_info "Cache hit found and skip-pull-from-cache enabled - exiting early"
    export_final_image_variables
    exit 0
  fi

  echo "--- :docker: Processing cache result"
  local image_pulled=false

  if [[ "${BUILDKITE_PLUGIN_DOCKER_CACHE_HIT:-false}" == "true" ]]; then
    # Provider already pulled the cache image
    log_success "Using cached image: $cache_image"
    image_pulled=true

    # Check if we already have the required tags locally
    local target_with_key="${BUILDKITE_PLUGIN_DOCKER_CACHE_IMAGE}:${BUILDKITE_PLUGIN_DOCKER_CACHE_KEY}"
    local target_latest="${BUILDKITE_PLUGIN_DOCKER_CACHE_IMAGE}:latest"

    local needs_key_tag=true
    local needs_latest_tag=true

    # Check if we already have the exact tags we need
    if image_exists_locally "$target_with_key"; then
      needs_key_tag=false
    fi

    if image_exists_locally "$target_latest"; then
      needs_latest_tag=false
    fi

    # Only tag if we actually need to
    if [[ "$needs_key_tag" == "true" ]]; then
      tag_image "$cache_image" "$target_with_key"
    fi

    if [[ "$needs_latest_tag" == "true" ]]; then
      tag_image "$cache_image" "$target_latest"
    fi

    # If we didn't need any tagging, log that we skipped it
    if [[ "$needs_key_tag" == "false" && "$needs_latest_tag" == "false" ]]; then
      log_info "All required tags already exist locally - skipping tag operations"
    fi
  else
    # No cache hit - need to build
    if [[ "${BUILDKITE_PLUGIN_DOCKER_CACHE_STRATEGY:-hybrid}" == "build" ]]; then
      log_info "Build strategy - building with layer cache optimization"
    else
      log_info "Cache miss - will build from scratch"
    fi
  fi

  if [[ "$image_pulled" == "false" ]]; then
    echo "--- :docker: Building image"

    # Prepare build arguments
    local build_args=()
    local secrets_args=()

    # Add build args if specified
    read_build_args_into_array build_args
    read_secrets_into_array secrets_args

    # Build docker command
    local docker_build_cmd=(
      "docker" "build"
      "--file=${BUILDKITE_PLUGIN_DOCKER_CACHE_DOCKERFILE:-Dockerfile}"
      "--progress=plain"
      "--tag=${BUILDKITE_PLUGIN_DOCKER_CACHE_IMAGE}:${BUILDKITE_PLUGIN_DOCKER_CACHE_KEY}"
    )

    # Add target if specified
    if [[ -n "${BUILDKITE_PLUGIN_DOCKER_CACHE_TARGET:-}" ]]; then
      docker_build_cmd+=("--target=${BUILDKITE_PLUGIN_DOCKER_CACHE_TARGET}")
    fi

    # Add build args
    for arg in ${build_args[@]+"${build_args[@]}"}; do
      docker_build_cmd+=("$arg")
    done

    # Add secrets (enable BuildKit if needed)
    if [[ ${#secrets_args[@]} -gt 0 ]]; then
      export DOCKER_BUILDKIT=1
      for secret in ${secrets_args[@]+"${secrets_args[@]}"}; do
        docker_build_cmd+=("$secret")
      done
    fi

    # Add cache-from if available
    if [[ -n "${BUILDKITE_PLUGIN_DOCKER_CACHE_FROM:-}" ]]; then
      docker_build_cmd+=("--cache-from=${BUILDKITE_PLUGIN_DOCKER_CACHE_FROM}")
    fi

    # Add additional build args if specified
    if [[ -n "${BUILDKITE_PLUGIN_DOCKER_CACHE_ADDITIONAL_BUILD_ARGS:-}" ]]; then
      # shellcheck disable=SC2086
      docker_build_cmd+=("${BUILDKITE_PLUGIN_DOCKER_CACHE_ADDITIONAL_BUILD_ARGS[@]}")
    fi

    # Add context
    docker_build_cmd+=("${BUILDKITE_PLUGIN_DOCKER_CACHE_CONTEXT:-.}")

    log_info "Building: ${docker_build_cmd[*]}"

    # Execute build
    if "${docker_build_cmd[@]}"; then
      log_success "Image built successfully"

      # Tag as latest
      tag_image "${BUILDKITE_PLUGIN_DOCKER_CACHE_IMAGE}:${BUILDKITE_PLUGIN_DOCKER_CACHE_KEY}" "${BUILDKITE_PLUGIN_DOCKER_CACHE_IMAGE}:latest"

      # Push cache
      echo "--- :docker: Pushing cache"
      save_cache
    else
      log_error "Docker build failed"
      exit 1
    fi
  fi

  # Export environment variables for subsequent plugins
  export_final_image_variables

  log_success "Docker cache build completed"
}

# Helper function to read build args into array
read_build_args_into_array() {
  local array_name="$1"
  local i=0

  # Check for single value
  if [[ -n "${BUILDKITE_PLUGIN_DOCKER_CACHE_BUILD_ARGS:-}" ]]; then
    eval "${array_name}+=(\"--build-arg=\${BUILDKITE_PLUGIN_DOCKER_CACHE_BUILD_ARGS}\")"
  else
    # Check for array values
    for ((i=0; ; i++)); do
      local var_name="BUILDKITE_PLUGIN_DOCKER_CACHE_BUILD_ARGS_$i"
      if [[ -n "${!var_name:-}" ]]; then
        local arg="${!var_name}"
        if [[ "$arg" != *=* ]]; then
          # Environment variable shorthand
          arg+="=${!arg:-}"
        fi
        eval "${array_name}+=(\"--build-arg=\$arg\")"
      else
        break
      fi
    done
  fi
}

# Helper function to read secrets into array
read_secrets_into_array() {
  local array_name="$1"
  local i=0

  # Check for single value
  if [[ -n "${BUILDKITE_PLUGIN_DOCKER_CACHE_SECRETS:-}" ]]; then
    if [[ "${BUILDKITE_PLUGIN_DOCKER_CACHE_SECRETS}" =~ ^id= ]]; then
      eval "${array_name}+=(\"--secret=\${BUILDKITE_PLUGIN_DOCKER_CACHE_SECRETS}\")"
    else
      eval "${array_name}+=(\"--secret=id=\${BUILDKITE_PLUGIN_DOCKER_CACHE_SECRETS},env=\${BUILDKITE_PLUGIN_DOCKER_CACHE_SECRETS}\")"
    fi
  else
    # Check for array values
    for ((i=0; ; i++)); do
      local var_name="BUILDKITE_PLUGIN_DOCKER_CACHE_SECRETS_$i"
      if [[ -n "${!var_name:-}" ]]; then
        local secret="${!var_name}"
        if [[ "$secret" =~ ^id= ]]; then
          eval "${array_name}+=(\"--secret=\$secret\")"
        else
          eval "${array_name}+=(\"--secret=id=\$secret,env=\$secret\")"
        fi
      else
        break
      fi
    done
  fi
}

# Helper function to export final image variables
export_final_image_variables() {
  local full_image="${BUILDKITE_PLUGIN_DOCKER_CACHE_IMAGE}:${BUILDKITE_PLUGIN_DOCKER_CACHE_KEY}"

  # Extract image and tag parts
  local image_part="${full_image%:*}"
  local tag_part="${full_image##*:}"

  # Export for docker plugin compatibility
  export "${BUILDKITE_PLUGIN_DOCKER_CACHE_EXPORT_ENV_VARIABLE:-BUILDKITE_PLUGIN_DOCKER_IMAGE}=${full_image}"

  # Export separate components
  export BUILDKITE_PLUGIN_DOCKER_CACHE_EXPORT_IMAGE="$image_part"
  export BUILDKITE_PLUGIN_DOCKER_CACHE_EXPORT_TAG="$tag_part"

  log_info "Exported ${BUILDKITE_PLUGIN_DOCKER_CACHE_EXPORT_ENV_VARIABLE:-BUILDKITE_PLUGIN_DOCKER_IMAGE}=${full_image}"
}

main "$@"
